/* Script com objetivo de auxiliar a procura de OBJETOS "A" e OBJETOS "B" conforme 
seu posicionamento geografico e a criação de views para apresentar - GIS - SQL Server */

-- Situação 1: ONDE OBJETO "A" NÃO EXISTA NA TABELA "B" E POSIÇÃO E CODIGO 
-- ( VIEW QUE DEVE RETORNAR A CONSULTA AONDE EXISTEM OBJETOS "A" MAS NÃO EXISTE NA TABELA "B" )

CREATE VIEW VW_SITUACAO1
    AS SELECT 
        CAST(ROW()OVER (ORDER BY A.COLUMM_ID) AS INT) AS ID,
        A.COLUMM_A
        A.COLUMM_SHAPE
    FROM DATABASE.TABEL_A_PT AS A -- TABEL_A_PT TEM O POSICIONAMENTO DO TIPO PONTOS "SPACIAL"
    WHERE A.COLUMM_ID NOT IN (
        SELECT A.COLUMM_ID FROM DATABASE.TABEL_A_PT AS A, DATABASE.TABEL_B_PT AS B 
        WHERE A.SHAPE.STBuffer(1).STIntersects(B.SHAPE) = 1 -- TRUE
        AND COLUMM_B IN (1,2) -- OUTROS NUMEROS IDENTIFICADORES PODEM SER ACRESCENTADOS
        GROUP BY A.COLUMM_ID, A.COLUMM_A
        )
    );

-- Situação 2: ONDE OBJETO "A" EXISTA NA TABELA DE "B", TEM CODIGO MAS NÃO TEM POSIÇÃO
-- ( VIEW QUE DEVE RETONAR A CONSULTA DOS OBJETOS "A" QUES EXISTAM EM AS TABELAS COM CODIGO MAS NÃO TEM POSICIONAMENTO CORRETO E SUAS COORDENADAS )

CREATE VIEW VW_SITUACAO2
    AS SELECT CAST(ROW_NUMBER () OVER(ORDER BY B.COLUMM_ID) AS INT ) AS ID,
    B.COLUMM_ID,
    B.COLUMM_B,
    A.COLUMM_A
    A.COLUMM_SHAPE
    B.SHAPE.STDistance(A.SHAPE) AS DIST,
    B.SHAPE.STX AS X
    B.SHAPE.STY AS Y
    FROM DATABASE.TABEL_B_PT AS B
    INNER JOIN DATABASE.TABEL_A_PT AS A
	ON	
		B.SHAPE.STDistance(A.SHAPE) <= 10 -- DISTANCIA MENOR QUE ATÉ 10 METROS
	WHERE 
		B.COLUMM_C IN (1,2) -- OUTROS NUMEROS IDENTIFICADORES PODEM SER ACRESCENTADOS
	AND 
		B.COLUMM_ID = A.COLUMM_A;

	SELECT * FROM VW_SITUACAO2
	ORDER BY DIST desc;

-- Situação 3: ONDE OBJETO "A" EXISTA NA TABELA OBJETO "B", NÃO TEM CODIGO E NEM POSIÇÃO E SUA COORDENADA
-- ( VIEW QUE DEVE RETONAR A CONSULTA AS VALVULAS QUES EXISTAM MAS TABELAS COMPONENTES E SUAS COORDENADAS MAS NÃO TEM CODIGO E POSICIONAMENTO CORRETO )

CREATE VIEW VW_SITUACAO3
	AS SELECT 
		cast ( row_number () OVER (ORDER BY B.COLUMM_ID) as INT) AS ID,
		B.COLUMM_ID,
		B.COLUMM_C,
		A.COLUMM_A,
		A.Shape,
		B.SHAPE.STDistance(A.Shape) AS DIST,
		B.SHAPE.STX AS X,
		B.SHAPE.STY AS Y
	FROM DATABASE.TABEL_B_PT B, 
		DATABASE.TABEL_A_PT A
	WHERE B.SHAPE.STDistance(A.SHAPE) <= 10 -- DISTANCIA MENOR QUE ATÉ 10 METROS
	AND B.COLUMM_C IN (1,2) -- OUTROS NUMEROS IDENTIFICADORES PODEM SER ACRESCENTADOS
	AND B.COLUMM_ID IS NULL; 

	SELECT * FROM VW_SITUACAO3
	ORDER BY OBJECTID desc;

-- Situação 3_1: ONDE SO DEVE MOSTRAR OS OS NOMES DIFERENTES DA "B" COM "A"
-- ( VIEW QUE DEVE RETORNAR OS OBJETOS "A" NA TABELA "B" SEM CODIGO E POSICIONAMENTO E SUAS COORDENADAS )

CREATE VIEW VW_SITUACAO3_1 AS
        SELECT 
            cast ( row_number () OVER (ORDER BY B.COLUMM_ID) as INT) AS ID,
            B.COLUMM_ID,
            B.COLUMM_C,
            A.COLUMM_A,
            A.Shape,
            B.SHAPE.STDistance(A.Shape) AS DIST,
            B.SHAPE.STX AS X,
            B.SHAPE.STY AS Y
        FROM DATABASE.TABEL_B_PT AS B, DATABASE.TABEL_A_PT AS A
        WHERE B.SHAPE.STDistance(A.SHAPE) <= 10 -- DISTANCIA MENOR QUE ATÉ 10 METROS
        AND B.COLUMM_C IN (1,2) -- OUTROS NUMEROS IDENTIFICADORES PODEM SER ACRESCENTADOS
        AND B.COLUMM_ID <> A.COLUMM_A;

	SELECT * FROM VW_SITUACAO3_1
	ORDER BY CODIGO_NOVO,DIST DESC;

-- Situação 4: ONDE O OBJETO "A" EXISTA NA TABELA "B", TEM POSIÇÃO MAS NÃO TEM CODIGO
-- ( DEVE RETORNAR OBJETOS "A" NA TABELA "B" COM POSICIONAMENTO COM SUA COORDENADA MAS SEM CODIGO )

CREATE VIEW VW_SITUACAO4
	AS
    SELECT 
		cast ( row_number () OVER (ORDER BY B.COLUMM_ID) as INT) AS ID,
        B.COLUMM_ID,
        B.COLUMM_C,
        A.COLUMM_A,
        A.Shape,
        B.SHAPE.STDistance(A.Shape) AS DIST,
        B.SHAPE.STX AS X,
        B.SHAPE.STY AS Y
	FROM DATABASE.TABEL_B_PT AS B
	INNER JOIN DATABASE.TABEL_A_PT AS A
	ON B.SHAPE.STBuffer(0.1).STIntersects(A.SHAPE) = 1 -- CRIA UM BUFFER DE ACORDO COM A DISTANCIA DETERMINADA NO VALOR MIN MENOR QUE ATÉ 10 METROS
	WHERE B.COLUMM_C IN (1,2) -- OUTROS NUMEROS IDENTIFICADORES PODEM SER ACRESCENTADOS
	AND B.COLUMM_ID IS NULL;
	
	SELECT * FROM VW_SITUACAO4;